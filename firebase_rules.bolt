isLoggedIn() { auth != null }

path / {
  read() { isLoggedIn() }
  write() { false }
}

type Signup {
  email: String,
  name: String,
  created: InitialTimestamp
}

path /signups/{uid} is Signup {
  // create() { isNew(this) && ref.parent(this.email) = null}
  index() { return ['email']; }
  // create() { isNew(this) && isUnique(this, 'signups')}
  create() { true }
  update() { false }
  delete() { false }
  read() { isLoggedIn() }
}

type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}

// Returns true if the value is intialized to init, or if it retains it's prior
// value, otherwise.
initial(value, init) { value == (prior(value) == null ? init : prior(value)) }

isNew(ref) { prior(ref) == null }

// !root.child('signups').child(newData.val()).exists()
// isUnique(ref, tablename) { !root.child(tablename).child(ref) != null }
